// Mocks generated by Mockito 5.4.5 from annotations
// in pika_app/test/features/categories/domain/usecases/get_categories_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:pika_app/core/domain/failures/failures.dart' as _i5;
import 'package:pika_app/features/categories/domain/entities/category_entity.dart'
    as _i6;
import 'package:pika_app/features/categories/domain/repositories/category_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CategoryRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCategoryRepository extends _i1.Mock
    implements _i3.CategoryRepository {
  MockCategoryRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<
      _i2.Either<
          _i5.Failure,
          ({
            List<_i6.CategoryEntity> items,
            ({
              bool hasMore,
              bool hasPrevious,
              int limit,
              int page,
              int total
            }) pagination
          })>> getCategories({
    int? page = 1,
    int? limit = 20,
    String? parentId,
    int? level,
    bool? isActive,
    bool? includeChildren = false,
    String? sort = 'sort_order',
    String? order = 'asc',
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCategories,
          [],
          {
            #page: page,
            #limit: limit,
            #parentId: parentId,
            #level: level,
            #isActive: isActive,
            #includeChildren: includeChildren,
            #sort: sort,
            #order: order,
          },
        ),
        returnValue: _i4.Future<
            _i2.Either<
                _i5.Failure,
                ({
                  List<_i6.CategoryEntity> items,
                  ({
                    bool hasMore,
                    bool hasPrevious,
                    int limit,
                    int page,
                    int total
                  }) pagination
                })>>.value(_FakeEither_0<
            _i5.Failure,
            ({
              List<_i6.CategoryEntity> items,
              ({
                bool hasMore,
                bool hasPrevious,
                int limit,
                int page,
                int total
              }) pagination
            })>(
          this,
          Invocation.method(
            #getCategories,
            [],
            {
              #page: page,
              #limit: limit,
              #parentId: parentId,
              #level: level,
              #isActive: isActive,
              #includeChildren: includeChildren,
              #sort: sort,
              #order: order,
            },
          ),
        )),
      ) as _i4.Future<
          _i2.Either<
              _i5.Failure,
              ({
                List<_i6.CategoryEntity> items,
                ({
                  bool hasMore,
                  bool hasPrevious,
                  int limit,
                  int page,
                  int total
                }) pagination
              })>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.CategoryEntity>> getCategoryById(
          String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCategoryById,
          [id],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i6.CategoryEntity>>.value(
                _FakeEither_0<_i5.Failure, _i6.CategoryEntity>(
          this,
          Invocation.method(
            #getCategoryById,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.CategoryEntity>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.CategoryEntity>> getCategoryBySlug(
          String? slug) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCategoryBySlug,
          [slug],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i6.CategoryEntity>>.value(
                _FakeEither_0<_i5.Failure, _i6.CategoryEntity>(
          this,
          Invocation.method(
            #getCategoryBySlug,
            [slug],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.CategoryEntity>>);

  @override
  _i4.Future<
      _i2.Either<_i5.Failure, List<_i6.CategoryEntity>>> getFeaturedCategories(
          {int? limit = 10}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFeaturedCategories,
          [],
          {#limit: limit},
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.CategoryEntity>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.CategoryEntity>>(
          this,
          Invocation.method(
            #getFeaturedCategories,
            [],
            {#limit: limit},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.CategoryEntity>>>);

  @override
  _i4.Future<
      _i2
      .Either<_i5.Failure, List<_i6.CategoryEntity>>> getCategoriesByPopularity(
          {int? limit = 10}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCategoriesByPopularity,
          [],
          {#limit: limit},
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.CategoryEntity>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.CategoryEntity>>(
          this,
          Invocation.method(
            #getCategoriesByPopularity,
            [],
            {#limit: limit},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.CategoryEntity>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.CategoryEntity>> createCategory(
          _i6.CategoryEntity? category) =>
      (super.noSuchMethod(
        Invocation.method(
          #createCategory,
          [category],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i6.CategoryEntity>>.value(
                _FakeEither_0<_i5.Failure, _i6.CategoryEntity>(
          this,
          Invocation.method(
            #createCategory,
            [category],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.CategoryEntity>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.CategoryEntity>> updateCategory(
          _i6.CategoryEntity? category) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateCategory,
          [category],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i6.CategoryEntity>>.value(
                _FakeEither_0<_i5.Failure, _i6.CategoryEntity>(
          this,
          Invocation.method(
            #updateCategory,
            [category],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.CategoryEntity>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> deleteCategory(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteCategory,
          [id],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #deleteCategory,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Stream<_i2.Either<_i5.Failure, List<_i6.CategoryEntity>>> watchCategories(
          {bool? isActive}) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchCategories,
          [],
          {#isActive: isActive},
        ),
        returnValue: _i4
            .Stream<_i2.Either<_i5.Failure, List<_i6.CategoryEntity>>>.empty(),
      ) as _i4.Stream<_i2.Either<_i5.Failure, List<_i6.CategoryEntity>>>);

  @override
  _i4.Future<
      _i2.Either<_i5.Failure, List<_i6.CategoryEntity>>> searchCategories({
    required String? query,
    int? limit = 20,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchCategories,
          [],
          {
            #query: query,
            #limit: limit,
          },
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.CategoryEntity>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.CategoryEntity>>(
          this,
          Invocation.method(
            #searchCategories,
            [],
            {
              #query: query,
              #limit: limit,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.CategoryEntity>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i3.CategoryStats>> getCategoryStats(
          String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCategoryStats,
          [id],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i3.CategoryStats>>.value(
                _FakeEither_0<_i5.Failure, _i3.CategoryStats>(
          this,
          Invocation.method(
            #getCategoryStats,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i3.CategoryStats>>);
}
