services:
  postgres:
    container_name: pika_postgres
    hostname: postgres
    image: postgis/postgis:17-3.5
    platform: linux/amd64
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_DB: '${PG_DATABASE}'
      POSTGRES_USER: '${PG_USER}'
      POSTGRES_PASSWORD: '${PG_PASSWORD}'
    ports:
      - '${PG_PORT}:5432'
    volumes:
      - ./.local/data/postgres:/var/lib/postgresql/data
      - ./packages/tests/src/utils/dump/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${PG_USER} -d ${PG_DATABASE}']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  redis:
    container_name: pika_redis
    hostname: redis
    image: redis:7.2-alpine
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - '${REDIS_PORT}:6379'
    volumes:
      - ./.local/data/redis:/data
    command: ['redis-server', '--appendonly', 'yes', '--port', '6379']
    healthcheck:
      test: ['CMD-SHELL', 'redis-cli ping || exit 1']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  stripe-mock:
    container_name: pika_stripe_mock
    hostname: stripe-mock
    image: stripe/stripe-mock:latest
    platform: linux/amd64
    restart: unless-stopped
    ports:
      - '${STRIPE_MOCK_PORT:-12111}:12111'
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:12111/v1/charges || exit 1']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  minio:
    container_name: pika_minio
    hostname: minio
    image: minio/minio:latest
    platform: linux/amd64
    restart: unless-stopped
    env_file:
      - .env
    environment:
      MINIO_ROOT_USER: '${MINIO_ROOT_USER:-minioadmin}'
      MINIO_ROOT_PASSWORD: '${MINIO_ROOT_PASSWORD:-minioadmin}'
    ports:
      - '${MINIO_PORT:-9000}:9000'
      - '${MINIO_CONSOLE_PORT:-9001}:9001'
    volumes:
      - ./.local/data/minio:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/ready']
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - backend

  # MinIO bucket initialization
  minio-init:
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
    env_file:
      - .env
    entrypoint: >
      /bin/sh -c "
      mc alias set minio http://minio:9000 ${MINIO_ROOT_USER:-minioadmin} ${MINIO_ROOT_PASSWORD:-minioadmin};
      mc mb -p minio/${AWS_S3_BUCKET:-pika-uploads} || true;
      echo 'Bucket ${AWS_S3_BUCKET:-pika-uploads} ready';
      "
    networks:
      - backend

  mailhog:
    container_name: pika_mailhog
    hostname: mailhog
    image: mailhog/mailhog:latest
    platform: linux/amd64
    restart: unless-stopped
    ports:
      - '${MAILHOG_SMTP_PORT:-1025}:1025' # SMTP server
      - '${MAILHOG_UI_PORT:-8025}:8025' # Web UI
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'wget --no-verbose --tries=1 --spider http://localhost:8025 || exit 1',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - backend

networks:
  backend:
    driver: bridge
